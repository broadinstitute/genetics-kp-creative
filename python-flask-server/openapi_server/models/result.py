# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.edge_binding import EdgeBinding
from openapi_server.models.node_binding import NodeBinding
from openapi_server import util

from openapi_server.models.edge_binding import EdgeBinding  # noqa: E501
from openapi_server.models.node_binding import NodeBinding  # noqa: E501

class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_bindings=None, edge_bindings=None, score=None):  # noqa: E501
        """Result - a model defined in OpenAPI

        :param node_bindings: The node_bindings of this Result.  # noqa: E501
        :type node_bindings: Dict[str, List[NodeBinding]]
        :param edge_bindings: The edge_bindings of this Result.  # noqa: E501
        :type edge_bindings: Dict[str, List[EdgeBinding]]
        :param score: The score of this Result.  # noqa: E501
        :type score: float
        """
        self.openapi_types = {
            'node_bindings': Dict[str, List[NodeBinding]],
            'edge_bindings': Dict[str, List[EdgeBinding]],
            'score': float
        }

        self.attribute_map = {
            'node_bindings': 'node_bindings',
            'edge_bindings': 'edge_bindings',
            'score': 'score'
        }

        self._node_bindings = node_bindings
        self._edge_bindings = edge_bindings
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_bindings(self):
        """Gets the node_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.  # noqa: E501

        :return: The node_bindings of this Result.
        :rtype: Dict[str, List[NodeBinding]]
        """
        return self._node_bindings

    @node_bindings.setter
    def node_bindings(self, node_bindings):
        """Sets the node_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.  # noqa: E501

        :param node_bindings: The node_bindings of this Result.
        :type node_bindings: Dict[str, List[NodeBinding]]
        """
        if node_bindings is None:
            raise ValueError("Invalid value for `node_bindings`, must not be `None`")  # noqa: E501

        self._node_bindings = node_bindings

    @property
    def edge_bindings(self):
        """Gets the edge_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph edge bindings where the dictionary keys are the key identifiers of the Query Graph edges and the associated values of those keys are instances of EdgeBinding schema type (see below). This value is an array of EdgeBindings since a given query edge may resolve to multiple knowledge graph edges in the result.  # noqa: E501

        :return: The edge_bindings of this Result.
        :rtype: Dict[str, List[EdgeBinding]]
        """
        return self._edge_bindings

    @edge_bindings.setter
    def edge_bindings(self, edge_bindings):
        """Sets the edge_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph edge bindings where the dictionary keys are the key identifiers of the Query Graph edges and the associated values of those keys are instances of EdgeBinding schema type (see below). This value is an array of EdgeBindings since a given query edge may resolve to multiple knowledge graph edges in the result.  # noqa: E501

        :param edge_bindings: The edge_bindings of this Result.
        :type edge_bindings: Dict[str, List[EdgeBinding]]
        """
        if edge_bindings is None:
            raise ValueError("Invalid value for `edge_bindings`, must not be `None`")  # noqa: E501

        self._edge_bindings = edge_bindings

    @property
    def score(self):
        """Gets the score of this Result.

        A numerical score associated with this result indicating the relevance or confidence of this result relative to others in the returned set. Higher MUST be better.  # noqa: E501

        :return: The score of this Result.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Result.

        A numerical score associated with this result indicating the relevance or confidence of this result relative to others in the returned set. Higher MUST be better.  # noqa: E501

        :param score: The score of this Result.
        :type score: float
        """

        self._score = score
